from tournament.models import Player, Team, Match


def populate_player_database(filename="players.csv"):
	with open(filename) as f:
		for line in f:
			stripline = line.strip()
			splitline = stripline.split(',')

			try:
				assert len(splitline)==9
				p = Player(*splitline)
				p.save()
			except:
				import pdb
				pdb.set_trace()
				print("hi")
				raise


def populate_team_database():
	teams = ["Team A", "Team B", "Team C", "Team D"]
	for team in teams:
		Team(name=team).save()


def empty_player_database():
	for p in Player.objects.all():
		p.delete()


def reset():
	empty_player_database()
	populate_player_database()


def parse_ajax_to_json(text):
	import json
	ans = json.loads(text)
	return ans


def calc_rating_change(bracketbefore, starsbefore, winner, players):
	if players == 4:
		ffa = True
	elif players == 2:
		ffa = False
	else:
		raise ValueError("calc_rating_change doesn't know how to score a game with "+str(players)+" players.")
	MAX_STAR = 3
	MIN_STAR = 0
	MAX_BRACKET = 5
	MIN_BRACKET = 1

	STAR_AFTER_UPGRADE = 1
	STAR_AFTER_DOWNGRADE = 3
	bracketafter, starsafter = bracketbefore, starsbefore
	if ffa:
		stars_gained = 2
	else:
		stars_gained = 1
	if winner:
		starsafter = starsbefore + stars_gained
	else:
		starsafter = starsbefore - 1

	if starsafter < MIN_STAR:
		if bracketbefore > MIN_BRACKET:
			bracketafter -= 1
			starsafter = STAR_AFTER_DOWNGRADE
		else:
			bracketafter = MIN_BRACKET
			starsafter = MIN_STAR

	if starsafter >= MAX_STAR + 1:
		if bracketbefore < MAX_BRACKET:
			bracketafter = bracketbefore + 1
			starsafter = STAR_AFTER_UPGRADE
		else:
			bracketafter = MAX_BRACKET
			starsafter = MAX_STAR

	return bracketafter, starsafter


def assign_location(match):
	import random
	location_order = ["M", "C", "I"]
	total_preference = 7

	for player in match.players.all():
		total_preference |= player.preference
	location_count = bin(total_preference).count("1")

	if location_count == 0:
		raise ValueError("assign_location got a match that can't be assigned")
	elif location_count < 3:
		match.notes.append("This match had veto'd location. Location generated by:" + str(total_preference))
	if location_count == 1:
		match.location = location_order[total_preference.index(True)]
	elif location_count == 3:
		match.location = location_order[random.choice([0, 0, 1, 2])]

	# can't think of a general method, let's just enumerate the 3 possibilities
	elif total_preference.index(False) == 0:  # ceres and io
		match.location = location_order[random.choice([1, 2])]
	elif total_preference.index(False) == 1:  # mars and io
		match.location = location_order[random.choice([0, 0, 2])]
	elif total_preference.index(False) == 2:  # mars and ceres
		match.location = location_order[random.choice([0, 0, 1])]

	if not match.location:
		assert False  # if we got here then we have a bug
